<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:egov-security="http://maven.egovframe.go.kr/schema/egov-security"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
		http://maven.egovframe.go.kr/schema/egov-security http://maven.egovframe.go.kr/schema/egov-security/egov-security-3.10.0.xsd">

	<!-- 수정일 수정자 수정내용 ========== ============ ================================================= 
		2011.09.07 서준식 일반, 업무사용자의 경우 조직아이디가 없어 로그인이 안되던 문제 수정(SQL 수정) 2011.09.25 
		서준식 usersByUsernameQuery 쿼리의 조직 아이디 비교 부분 오류 수정 > alias 추가 2014.06.13 Vincent 
		Han 표준프레임워크 3.0 적용 (간소화 설정 사용) 2017.07.10 장동한 실행행환경 v3.7 적용[보안기능 추가(sniff, 
		xFrameOptions, xssProtection csrf)] 2018.10.26 신용호 실행행환경 v3.8 적용 2020.08.28 
		정진호 표준프레임워크 v3.10 개선 -->

	<security:http>
		<security:intercept-url pattern="/home.do"
			access="permitAll" />
		<security:intercept-url pattern="/auth/**"
			access="permitAll" />
		<security:intercept-url pattern="/admin/**"
			access="hasRole('ADMIN')" />
		<security:intercept-url pattern="/**"
			access="hasAnyRole('USER, ADMIN')" />
		<security:form-login
			login-page="/auth/loginForm.do" default-target-url="/home.do"
			authentication-failure-url="/auth/loginForm.do?error"
			username-parameter="uid" password-parameter="password" />
		<security:logout logout-url="/logout"
			logout-success-url="/home.do" />

		<security:access-denied-handler
			error-page="/auth/loginDenied.do" />
	</security:http>

	<!-- <security:authentication-manager> <security:authentication-provider> 
		<security:user-service> <security:user name="admin" password="admin" authorities="ROLE_ADMIN" 
		/> <security:user name="user" password="user" authorities="ROLE_USER" /> 
		</security:user-service> </security:authentication-provider> </security:authentication-manager> -->

	<bean id="userDetailsService"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- BCryptPasswordEncoder 클래스 빈 추가 -->
	<bean id="bcryptPasswordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

	<!-- provider -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="securityService">
			<!-- 로그인 시 비밀번호를 암호화해서 DB에서 조회한 비밀번호와 비교 -->
			<security:password-encoder
				ref="bcryptPasswordEncoder" />
			<!-- <security:jdbc-user-service
				data-source-ref="dataSource" role-prefix=""
				users-by-username-query="select user_id, password, use_yn from tb_users where user_id = ?"
				authorities-by-username-query="select user_id, authority from tb_authorities where user_id = ?"
				group-authorities-by-username-query="select g.id, g.group_name, ga.authority from tb_groups g, 
				          tb_group_members gm, tb_group_authorities ga where gm.user_id = ? 
				          and g.id = ga.group_id and g.id = gm.group_id" /> -->
		</security:authentication-provider>
	</security:authentication-manager>
	
	<bean id="securityService" class="egovframework.example.sample.service.impl.UserJdbcDaoImpl">
		<property name="dataSource" ref="dataSource" />
		<property name="rolePrefix" value="" />
		<property name="usersByUsernameQuery">
			<value>
				SELECT user_id, password, use_yn
				FROM tb_users
				WHERE user_id = ?
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				SELECT user_id, authority
				FROM tb_authorities
				WHERE user_id = ?
			</value>
		</property>
		<property name="enableGroups" value="false" />
	</bean>

</beans>
